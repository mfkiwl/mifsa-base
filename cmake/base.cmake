#*********************************************************************************
#  *Copyright(C): Juntuan.Lu, 2020-2030, All rights reserved.
#  *Author:  Juntuan.Lu
#  *Version: 1.0
#  *Date:  2022/04/01
#  *Email: 931852884@qq.com
#  *Description:
#  *Others:
#  *Function List:
#  *History:
#**********************************************************************************

if(NOT MIFSA_BASE_CMAKE)
    set(MIFSA_BASE_CMAKE TRUE)
    include(${CMAKE_CURRENT_LIST_DIR}/platform.cmake)
    include(${CMAKE_CURRENT_LIST_DIR}/common.cmake)
    option(BUILD_SHARED_LIBS "Build shared libraries" ON)
    if(MIFSA_INTERNAL_PROJECT)
        include(GNUInstallDirs)
        set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/output/bin)
        set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/output/lib)
        set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/output/lib)
        set(COMMON_PKG_OUTPUT_PATH ${CMAKE_BINARY_DIR}/output/pkgconfig)
        set(COMMON_ETC_OUTPUT_PATH ${CMAKE_BINARY_DIR}/output/etc)
        set(COMMON_SHARE_OUTPUT_PATH ${CMAKE_BINARY_DIR}/output/share)
        set(COMMON_CMAKE_OUTPUT_PATH ${CMAKE_BINARY_DIR}/output/cmake)
        set(COMMON_INCLUDE_OUTPUT_PATH ${CMAKE_BINARY_DIR}/output/include)
        set(COMMON_SYSTEMD_OUTPUT_PATH ${CMAKE_BINARY_DIR}/output/systemd)
        message("** System=${PL_SYS}")
        message("** Arch=${PL_ARCH}")
        message("** Compiler=${PL_COMPILER}")
        message("** Build type=${CMAKE_BUILD_TYPE}")
        message("** Install prefix dir=${CMAKE_INSTALL_PREFIX}")
        message("** Install bin dir=${CMAKE_INSTALL_BINDIR}")
        message("** Install lib dir=${CMAKE_INSTALL_LIBDIR}")
        message("** Install include dir=${CMAKE_INSTALL_INCLUDEDIR}")
        if(BUILD_SHARED_LIBS)
            message("** Build shared library")
            set(MIFSA_LIBRARY_DEF "-DMIFSA_LIBRARY")
            set(MIFSA_LIBRARY_APPDEF "")
        else()
            message("** Build static library")
            set(MIFSA_LIBRARY_DEF "-DMIFSA_LIBRARY_STATIC")
            set(MIFSA_LIBRARY_APPDEF "-DMIFSA_LIBRARY_STATIC")
        endif()
        option(MIFSA_BUILD_EXAMPLES "MIFSA build examples" ON)
        if(MIFSA_BUILD_EXAMPLES)
            message("** Build examples")
        endif()
        option(MIFSA_BUILD_TESTS "MIFSA build tests" ON)
        if(MIFSA_BUILD_EXAMPLES)
            message("** Build tests")
        endif()
        if(MIFSA_MODULE_PROJECT)
            set(MIFSA_IDL_TYPE "auto" CACHE STRING "Support ros/vsomeip/fdbus")
            include(${CMAKE_CURRENT_LIST_DIR}/find_3rdparty.cmake)
            include(${CMAKE_CURRENT_LIST_DIR}/find_systemd.cmake)
            if(SYSTEMD_ENABLE)
                option(MIFSA_SYSTEMD "MIFSA use systemd" ON)
                if(MIFSA_SYSTEMD)
                    message("** Use systemd")
                endif()
            endif()
            include(${CMAKE_CURRENT_LIST_DIR}/find_ros.cmake)
            include(${CMAKE_CURRENT_LIST_DIR}/find_vsomeip.cmake)
            include(${CMAKE_CURRENT_LIST_DIR}/find_fdbus.cmake)
            include(${CMAKE_CURRENT_LIST_DIR}/idl.cmake)
        endif()
        include(${CMAKE_CURRENT_LIST_DIR}/module.cmake)
    endif()
endif()

if(MIFSA_MODULE_TYPE AND MIFSA_MODULE_VERSION)
    mifsa_get_git_commit(MIFSA_MODULE_COMMITID)
    message("|| Type: ${MIFSA_MODULE_TYPE}, Version: ${MIFSA_MODULE_VERSION}, Commit id: ${MIFSA_MODULE_COMMITID} ||")
endif()
